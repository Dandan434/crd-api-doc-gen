<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <title>{{{appName}}}</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta charset="UTF-8" />
  {{>js_jquery}}
  {{>js_prettify}}
  {{>js_bootstrap}}
  {{>marked}}
  <script>
    $( document ).ready(function() {
      marked.setOptions({
        renderer: new marked.Renderer(),
        gfm: true,
        tables: true,
        breaks: false,
        pedantic: false,
        sanitize: false,
        smartLists: true,
        smartypants: false
      });

      var textFile = null;

      /// Function to be used to download a text json schema
      function makeTextFile(text) {

        var data = new Blob([text], {type: 'text/plain'});

        // If we are replacing a previously generated file we need to
        // manually revoke the object URL to avoid memory leaks.
        if (textFile !== null) {
          window.URL.revokeObjectURL(textFile);
        }

        textFile = window.URL.createObjectURL(data);

        var a = document.createElement("a");
        document.body.appendChild(a);
        a.style = "display: none";
        a.href = textFile;
        a.download = 'schema.txt';
        a.click();

        return textFile;
      };

      /// TODO: Implement resizing for expanding within iframe
      function callResize() {
        window.parent.postMessage('resize', "*");
      }

      function processMarked() {
        $(".marked").each(function() {
          $(this).html(marked($(this).html()));
        });
      }

      // Bootstrap Scrollspy
      $(this).scrollspy({ target: '#scrollingNav', offset: 18 });

      // Content-Scroll on Navigation click.
      $('.sidenav').find('a').on('click', function(e) {
          e.preventDefault();
          var id = $(this).attr('href');
          if ($(id).length > 0)
              $('html,body').animate({ scrollTop: parseInt($(id).offset().top) }, 400);
          window.location.hash = $(this).attr('href');
      });

      // Quickjump on Pageload to hash position.
      if(window.location.hash) {
          var id = window.location.hash;
          if ($(id).length > 0)
              $('html,body').animate({ scrollTop: parseInt($(id).offset().top) }, 0);
      }


      function initDynamic() {
        // tabs
        $('.nav-tabs-examples a').click(function (e) {
            e.preventDefault();
            $(this).tab('show');
        });


        $('.nav-tabs-examples').find('a:first').tab('show');

        // call scrollspy refresh method
        $(window).scrollspy('refresh');
      }

      initDynamic();

      // Pre- / Code-Format
      prettyPrint();

      //Convert elements with "marked" class to markdown
      processMarked();
    });

    function findNode(id, currentNode) {
        var currentChild,
            result;

        if ( Object.keys(currentNode)[0] == id) {
            return currentNode;
        } else {
            // Use a for loop instead of forEach to avoid nested functions
            // Otherwise "return" will not work properly
            for(var propt in currentNode){
                if (currentNode.hasOwnProperty(propt)) {
                    currentChild = currentNode[propt]
                    if (id == propt) {
                        return currentChild;
                    } else {
                        // Search in the current child
                        if (typeof(currentChild) === 'object') {
                            result = findNode(id, currentChild);
                            if (result != false) {
                                return result;
                            }
                        }
                    }
                }
            }
            // The node has not been found and we have no more options
           return false;
        }
    }
  </script>
  <style type="text/css">
    {{>fonts}}

    {{>css_bootstrap}}
    {{>css_prettify}}

    {{>styles}}
  </style>
</head>
<body>
  <script>
    // Script section to load models into a JS Var
    var defs = {}
    {{#models}}
    {{#model}}
    defs["{{name}}"] = {{{modelJson}}};
    {{/model}}
    {{/models}}

    var errs = {};
    {{#swagger.vendorExtensions.x-shared-errors}}
    {
      let err = {{{.}}};
      errs[err.errorID] = err;
    }
    {{/swagger.vendorExtensions.x-shared-errors}}
  </script>

  <div class="container-fluid">
    <div class="row-fluid">
      <div id="sidenav" class="span2">
        <nav id="scrollingNav">
          <ul class="sidenav">
            <li class="">
              <h2>Apis</h2>
            <li>
            {{#apiInfo}}
              {{#apis}}
                  {{#operations}}
                    {{#operation}}
                      {{#responses}}
                        <li class="">
                          <a href="#crd-{{message}}">{{message}}</a>
                        </li>
                      {{/responses}}
                    {{/operation}}
                  {{/operations}}
              {{/apis}}
            {{/apiInfo}}
          </ul>
        </nav>
      </div>
      <div id="content">
        <div id="project">
          <div class="pull-left">
            <p><h1>{{{appName}}}</h1></p>
            <p>{{{appDescription}}}</p>
            <p>
              {{#version}}
                <div class="app-desc">Version: {{{version}}}</div>
              {{/version}}
            </p>
          </div>
        </div>
        <div class="clearfix"></div>
        <div id="sections">
            {{#apiInfo}}
              {{#apis}}
                  {{#operations}}
                    {{#operation}}
                      {{#responses}}
                        <section id="crd-{{message}}" class="crd" data="{{message}}">
                        </section>
                      {{/responses}}
                    {{/operation}}
                  {{/operations}}
              {{/apis}}
            {{/apiInfo}}
          </div>
          <script>
            function setRequired(schema) {
              var required=schema.required||[];
              required.forEach(property=>{
                if(!!schema.properties && !!schema.properties[property])
                {
                  schema.properties[property].isRequired=true;
                }
              });
            }

            const renderCrd = (name,schema) => {
              setRequired(schema);
              return `
                <div class="crd-name">${name}</div>
                <div class="crd-description">${marked.parse(schema.description||'')}</div>
                <div class="properties-caption">Properties:</div>
                ${renderProperties(schema.properties)}
              `;
            };

            const renderProperty = (name,schema) => {
              var nameSection=!name?'':`
                <td class="prop-name">
                  ${name||''}
                </td>
              `;

              var typeSection = `
                <td class="prop-type-info">
                  <p class="prop-type">${schema.type||''}</p>
                  ${!schema.isRequired?'':' <p class="prop-required">required</p>'}
                  ${!schema.default?'':`<p class="prop-default">Default: ${JSON.stringify(schema.default)}</p>`}
                </td>
              `;

              var descriptionSection=`
                <td class="prop-description">
                  ${marked.parse(schema.description||'')}
                </td>
              `;

              var propDiv=`<tr class="prop-div"><td colspan="100%"></td></tr>`;

              var propInfo=`
                <tr class="prop-info">
                        ${nameSection}
                        ${typeSection}
                        ${descriptionSection}
                </tr>
              `;

              switch(schema.type)
              {
                case 'object':
                  setRequired(schema);
                  return propInfo+
                    (!schema.additionalProperties?'':`
                      <tr class="prop-properties">
                        <td class=""></td>
                        <td colspan="100%" class="prop-additionalProperties">*Allows additional properties</td>
                      </tr>`)+(Object.keys(schema.properties||{}).length==0?'':`
                    <tr class="prop-properties">
                        <td class="prop-properties-caption">Properties</td>
                        <td colspan="100%">${renderProperties(schema.properties||{})}</td>
                    </tr>
                  `)+propDiv;
                  break;
                case 'array':
                  return propInfo+`
                    <tr class="prop-items">
                    <td class="prop-properties-caption">Items</td>
                        <td colspan="100%">${renderProperties({'':schema.items||{}})}</td>
                    </tr>
                    ${propDiv}
                  `;
                  break;
                default:
                  return propInfo+propDiv;
                  break;
              }
            };

            const renderProperties = (properties) => {
              return `<table class="schema">`+Object.keys(properties).map(key=>renderProperty(key,properties[key])).join(' ')+`</table>`;
            };

            $(document).ready(function () {
              $(".crd").each(function( index ) {
                var crd=this.getAttribute("data");
                $(this).html(renderCrd(crd,defs[crd]));
              });
            });
          </script>
          <div id="footer">
            <div id="api-_footer">
              <p>Suggestions, contact, support and error reporting;
                {{#infoUrl}}
                  <div class="app-desc">Information URL: <a href="{{{infoUrl}}}">{{{infoUrl}}}</a></div>
                {{/infoUrl}}
                {{#infoEmail}}
                  <div class="app-desc">Contact Info: <a href="{{{infoEmail}}}">{{{infoEmail}}}</a></div>
                {{/infoEmail}}
              </p>
              {{#licenseInfo}}
                <div class="license-info">{{{licenseInfo}}}</div>
              {{/licenseInfo}}
              {{#licenseUrl}}
                <div class="license-url">{{{licenseUrl}}}</div>
              {{/licenseUrl}}
            </div>
          </div>
          {{^hideGenerationTimestamp}}
          <div id="generator">
          <div class="content">
            Generated {{generatedDate}}
          </div>
        </div>
        {{/hideGenerationTimestamp}}
      </div>
    </div>
  </div>
  {{>js_jsonformatter}}
  {{>js_jsonschemaview}}
  {{>js_json_schema_ref_parser}}
  {{>js_json_stringify_safe}}
  {{>js_webfontloader}}
  <script>
    var schemaWrapper = { "components": { "schemas" : defs}};
    defsParser = new $RefParser();
    defsParser.dereference(schemaWrapper).catch(function(err) {
      console.log(err);
    });
  </script>
  <script>
  $(document).ready(function () {
    $('.nav-tabs-examples').find('a:first').tab('show');
    $(this).scrollspy({ target: '#scrollingNav', offset: 18 });
  });
  </script>
</body>
</html>
